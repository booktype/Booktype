// Generated by CoffeeScript 1.6.3
(function () {
  define(['require', 'jquery', 'aloha', 'aloha/plugin', 'ui/ui', 'PubSub', 'jquery19', 'underscore', 'booktype', 'format/format-plugin'],
    function (require, jQuery, Aloha, Plugin, Ui, PubSub, jQuery19, _, booktype, formatPlugin) {

      // win.booktype.editor.data.settings.config.media.allowUpload

      var $ROOT, adoptedActions, makeItemRelay, squirreledEditable;
      var $ = jQuery;
      var foundTag = '';
      var foundStyle = null;
      var globalSettings = null;

      squirreledEditable = null;
      //   $ROOT = jQuery('body');
      $ROOT = jQuery('DIV.contentHeader');

      makeItemRelay = function (slot) {
        var ItemRelay;
        ItemRelay = (function () {
          function ItemRelay() {
          }

          ItemRelay.prototype.show = function () {
            return $ROOT.find(".action." + slot).removeClass('hidden');
          };

          ItemRelay.prototype.hide = function () {
          };

          ItemRelay.prototype.setActive = function (bool) {
            if (!bool) {
              $ROOT.find(".action." + slot).removeClass('active');
            }
            if (bool) {
              return $ROOT.find(".action." + slot).addClass('active');
            }
          };

          ItemRelay.prototype.setState = function (bool) {
            return this.setActive(bool);
          };

          ItemRelay.prototype.enable = function (bool) {
            if (bool == null) {
              bool = true;
            }
            if ($ROOT.find(".action." + slot).is('.btn')) {
              if (!bool) {
                $ROOT.find(".action." + slot).attr('disabled', 'disabled');
              }
              if (bool) {
                return $ROOT.find(".action." + slot).removeAttr('disabled');
              }
            } else {
              if (!bool) {
                $ROOT.find(".action." + slot).parent().addClass('disabled');
              }
              if (bool) {
                return $ROOT.find(".action." + slot).parent().removeClass('disabled');
              }
            }
          };

          ItemRelay.prototype.disable = function () {
            return this.enable(false);
          };

          ItemRelay.prototype.setActiveButton = function (a, b) {
            return;
          };

          ItemRelay.prototype.focus = function (a) {
            return;
          };

          ItemRelay.prototype.foreground = function (a) {
            return;
          };

          return ItemRelay;

        })();
        return new ItemRelay();
      };

      var _previousTag = null;

      var disableOptions = function (tag) {
        var toolbar = require('toolbar/toolbar-plugin');

        // This list should be somehow configurable
        var _buttons = booktype.editor.data.settings.config.edit.toolbar;
        var _menus = booktype.editor.data.settings.config.edit.menu;

        // This creates problems with book heading block
        // if(_previousTag === tag) return;
        // _previousTag = tag;

        toolbar.enableToolbarAll();
        toolbar.enableMenuAll();

        // When focus is in headings
        if (_.indexOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'], tag.toLowerCase()) != -1) {
          _.each(_buttons['H'], function (btn) {
            toolbar.disableToolbar(btn);
          });

          _.each(_menus['H'], function (btn) {
            toolbar.disableMenu(btn);
          });
        }

        // When focus is in preformated text
        if (_.indexOf(['pre'], tag.toLowerCase()) != -1) {
          _.each(_buttons['PRE'], function (btn) {
            toolbar.disableToolbar(btn);
          });

          _.each(_menus['PRE'], function (btn) {
            toolbar.disableMenu(btn);
          });
        }
      };


      adoptedActions = {};

      Ui.adopt = function (slot, type, settings) {
        var evt;
        evt = $.Event('aloha.toolbar.adopt');
        $.extend(evt, {
          params: {
            slot: slot,
            type: type,
            settings: settings
          },
          component: null
        });
        PubSub.pub(evt.type, evt);
        if (evt.isDefaultPrevented()) {
          evt.component.adoptParent(toolbar);
          return evt.component;
        }
        adoptedActions[slot] = settings;
        return makeItemRelay(slot);
      };

      var fireOnToolbar = function (editable) {
        var $ROOT2 = jQuery('DIV.contentHeader');

        var changeHeading = function (evt) {
          var $el, hTag, rangeObject;

          //evt.preventDefault();

          // mahaloBlock na elementu koji zelimo

          $el = jQuery(this);
          hTag = $el.attr('data-tagname');

          rangeObject = Aloha.Selection.getRangeObject();
          rangeObject.select();

          var _s = globalSettings.styles[hTag.toUpperCase()];
          var removePrevious = !_.isUndefined(_s.remove_previous)?_s.remove_previous:false;

          if (foundStyle) {
            if (foundStyle.type == 'custom') {
              if (!_.isUndefined(foundStyle.remove) && removePrevious) {
                foundStyle.remove(rangeObject);
                rangeObject = Aloha.Selection.getRangeObject();
                rangeObject.select();
              }
            }
          }

          var _hasModified = false;


          if (_s.type == 'custom') {
            if (!_.isUndefined(_s.create)) {
              _hasModified = _s.create(rangeObject);
            }
          }

          if (!_hasModified) {
            if (_s.type === 'formatting') {
              // formatPlugin.removeFormat();
              formatPlugin.changeMarkup(hTag);
            } else {
              Aloha.execCommand('FormatBlock', false, hTag);
            }
          }

          jQuery('.currentHeading')[0].innerHTML = $el[0].innerHTML;

          disableOptions(hTag);

          // publish message notification that toolbar element was clicked
          PubSub.pub('toolbar.action.triggered', {'event': evt});

          return true;
        };
        // bio 2
        $ROOT2.find(".action.changeHeading").not('.disabled').on('click', changeHeading);
        // $ROOT.on('click', '.action.changeHeading', changeHeading);
        // $ROOT2.on('mousedown', ".action", function(evt) {
        //   return evt.stopPropagation();
        // });


        return jQuery.each(adoptedActions, function (slot, settings) {
          var selector;
          selector = ".action." + slot;
          // bio 2
          jQuery(selector, $ROOT2).on('click', function (evt) {
            var $target;
            evt.preventDefault();
            Aloha.activeEditable = Aloha.activeEditable || squirreledEditable;
            $target = jQuery(evt.target);
            if (!($target.is(':disabled') || $target.parent().is('.disabled'))) {
              this.element = this;

              // publish message notification that toolbar element was clicked
              PubSub.pub('toolbar.action.triggered', {'event': evt});

              var applyFormat = settings.click.bind(this)(evt);

              // publish message notification after execution
              PubSub.pub('toolbar.action.after_execution', {'event': evt, 'action': slot});

              return applyFormat;
            }
          });

          if (settings.preview) {
            jQuery(selector, $ROOT).on('mouseenter', function (evt) {
              var $target;
              $target = jQuery(evt.target);
              if (!($target.is(':disabled') || $target.parent().is('.disabled'))) {
                return settings.preview.bind(this)(evt);
              }
            });
          }
          if (settings.unpreview) {
            return jQuery(selector, $ROOT).on('mouseleave', function (evt) {

              var $target;
              $target = jQuery(evt.target);
              if (!($target.is(':disabled') || $target.parent().is('.disabled'))) {
                return settings.unpreview.bind(this)(evt);
              }
            });
          }
        });
      };

      var matchStyle = function ($elem, style) {

      };
      /*
       IE9 has problems with this
       Aloha.bind('aloha-ready', function(event, editable) {
       fireOnToolbar(editable);
       });
       */

      // This is needed because of IE9

      jQuery19(document).on('booktype-ui-panel-active', function ($evt, name, panel) {
        if (name == 'edit') {
          var editable = Aloha.getEditableById('contenteditor');
          fireOnToolbar(editable);
        }

      });

      /*
       register the plugin with unique name
       */

      return Plugin.create("toolbar", {
        defaultSettings: {
          enabled: true,
          styles: {
            'H1': {type: 'tag'},
            'H2': {type: 'tag'},
            'H3': {type: 'tag'},
            'H4': {type: 'tag'},
            'H5': {type: 'tag'},
            'H6': {type: 'tag'},
            'P': {type: 'tag'},
            'PRE': {type: 'tag'}
          }
        },

        init: function () {
          var toolbar;
          toolbar = this;

          if (typeof Aloha.settings.plugins.font === 'undefined') {
            this.settings = this.defaultSettings;
          } else {
            this.settings = jQuery.extend(true, this.defaultSettings, this.settings);
          }

          globalSettings = this.settings;

          Aloha.bind('aloha-editable-activated', function (event, data) {
            return squirreledEditable = data.editable;
          });

          var $ROOT3 = jQuery('DIV.contentHeader');

          return PubSub.sub('aloha.selection.context-change', function (data) {
            var active, button, currentHeading, el, h, headings, tagnames;

            el = data.range.commonAncestorContainer;

            button = $ROOT3.find('.headings button').first();
            currentHeading = $ROOT3.find('.headings .currentHeading');
            headings = $ROOT3.find('.action.changeHeading');
            tagnames = [];
            headings.each(function () {
              return tagnames.push($(this).attr('data-tagname').toUpperCase());
            });

            h = $(el).parentsUntil('#contenteditor').andSelf();

            foundTag = '';

            var _foundStyle = _.find(_.filter(tagnames, function (elem) {
              return toolbar.settings.styles[elem].type === 'custom';
            }), function (elem) {
              var style = toolbar.settings.styles[elem];
              var isMatch = style.check(h);

              if (isMatch) {
                foundTag = elem;
                foundStyle = style;
              }

              return isMatch;
            });

            if (_.isUndefined(_foundStyle)) {
              _foundStyle = _.find(_.filter(tagnames, function (elem) {
                return toolbar.settings.styles[elem].type === 'formatting';
              }), function (elem) {
                var style = toolbar.settings.styles[elem];

                if (elem == h.last().get(0).tagName.toUpperCase()) {
                  foundTag = elem;
                  foundStyle = toolbar.settings.styles[elem];

                  return true;
                }
                return false;
              });
            }

            if (_.isUndefined(_foundStyle)) {
              h = h.filter(tagnames.join(',')).first();

              if (h.length > 0) {
                foundTag = h[0].tagName;
                foundStyle = toolbar.settings.styles[foundTag];
              }
            }

            if (foundTag === '') {
              button.prop('disabled', true);
              foundStyle = null;
              return currentHeading.html(headings.first().text());
            } else {
              button.prop('disabled', false);

              var parent = h.parent();

              if (parent[0].tagName === 'DIV' && parent.attr('data-aloha-block-type') === 'TitleBlock') {
                active = $.grep(headings, function (elem, i) {
                  return $(elem).attr('data-tagname').toUpperCase() === foundTag;
                });
              } else {
                active = $.grep(headings.not('.disabled'), function (elem, i) {
                  return $(elem).attr('data-tagname').toUpperCase() === foundTag;
                });
              }

              if (active.length) {
                disableOptions($(active[0]).attr('data-tagname'));

                return currentHeading.html($(active[0]).html());
              } else {
                return currentHeading.html(headings.first().text());
              }
            }
          });
        },
        childVisible: function (childComponent, visible) {
          var evt;
          evt = $.Event('aloha.toolbar.childvisible');
          evt.component = childComponent;
          evt.visible = visible;
          return PubSub.pub(evt.type, evt);
        },
        childFocus: function (childComponent) {
          var evt;
          evt = $.Event('aloha.toolbar.childfocus');
          evt.component = childComponent;
          return PubSub.pub(evt.type, evt);
        },
        childForeground: function (childComponent) {
          var evt;
          evt = $.Event('aloha.toolbar.childforeground');
          evt.component = childComponent;
          return PubSub.pub(evt.type, evt);
        },
        disableToolbar: function (action) {
          jQuery('DIV.contentHeader button.' + action).prop('disabled', true);
        },
        enableToolbar: function (action) {
          jQuery('DIV.contentHeader button.' + action).prop('disabled', false);
        },
        enableToolbarAll: function () {
          var _buttons = booktype.editor.data.settings.config.edit.toolbar['ALL'];
          var $this = this;

          _.each(_buttons, function (btn) {
            $this.enableToolbar(btn);
          });
        },
        disableMenu: function (action) {
          var $item = jQuery('DIV.contentHeader a.action.' + action).parent();
          if (!$item.hasClass('disabled'))
            $item.addClass('disabled');
        },
        enableMenu: function (action) {
          var $item = jQuery('DIV.contentHeader a.action.' + action).parent();

          if ($item.hasClass('disabled'))
            $item.removeClass('disabled');
        },
        enableMenuAll: function () {
          var _menus = booktype.editor.data.settings.config.edit.menu['ALL'];
          var $this = this;

          _.each(_menus, function (btn) {
            $this.enableMenu(btn);
          });
        },

        /*
         toString method
         */

        toString: function () {
          return "toolbar";
        }
      });
    });

}).call(this);

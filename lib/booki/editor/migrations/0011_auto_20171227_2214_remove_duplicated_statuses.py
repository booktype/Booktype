# -*- coding: utf-8 -*-
# Generated by Django 1.9.12 on 2017-12-27 22:14
from __future__ import unicode_literals

from django.db import migrations
from django.db.models import Count

# this is meant to fix any duplicated entries before create unique_together migration
# between book and status name
def _fix_duplicated_statuses(apps, schema_editor):
    BookStatus = apps.get_model('editor', 'BookStatus')
    Book = apps.get_model('editor', 'Book')

    records_found = False

    for book in Book.objects.all():
        qs = BookStatus.objects.filter(
            book=book).values("name").annotate(count_name=Count('name'))
        duplicated_names = qs.filter(count_name__gt=1)

        for x in duplicated_names:
            dupe = BookStatus.objects.filter(book=book, name=x['name']).order_by('id')
            first = dupe.first()

            # for the rest of statuses, we only need to reassign them to first that won't be deleted
            for _st in dupe[1:]:
                for chapter in _st.chapter_set.all():
                    chapter.status = first
                    chapter.save()

                for attach in _st.attachment_set.all():
                    attach.status = first
                    attach.save()

                print("Deleting duplicate entry '%s' with id '%s'" % (_st.name, _st.id))
                _st.delete()

        if len(duplicated_names) > 0:
            records_found = True

    if not records_found:
        print("No duplicated statuses found")

class Migration(migrations.Migration):

    dependencies = [
        ('editor', '0010_auto_20170908_0624'),
    ]

    operations = [
        migrations.RunPython(_fix_duplicated_statuses, reverse_code=migrations.RunPython.noop)
    ]
